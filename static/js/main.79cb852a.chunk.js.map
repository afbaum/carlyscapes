{"version":3,"sources":["components/images/grass.jpg","components/images/carley.jpg","components/layout/Contact.js","components/layout/Header.js","components/layout/Title.js","components/layout/Jumbotron.js","components/layout/Services.js","components/layout/About.js","components/layout/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Contact","props","useState","open","setOpen","focusAfterClose","toggle","name","setName","phone","setPhone","email","setEmail","message","setMessage","handleSubmit","e","preventDefault","templateParams","console","log","process","emailjs","send","then","response","status","text","err","Form","inline","Button","color","onClick","Modal","returnFocusAfterClose","isOpen","ModalBody","onSubmit","FormGroup","Label","for","Input","type","id","placeholder","value","onChange","target","ModalFooter","Header","className","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Title","Jumbo","src","wheel","alt","Service","About","carley","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.79cb852a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/grass.0275ec3f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/carley.e96207c7.jpg\";","\r\nimport React, { useState } from 'react';\r\nimport { Button, Modal, ModalBody, ModalFooter, Label, Input, FormGroup, Form } from 'reactstrap';\r\nimport emailjs from 'emailjs-com';\r\n\r\nconst Contact = (props) => {\r\n    const [open, setOpen] = useState(false);\r\n    const [focusAfterClose, setFocusAfterClose] = useState(true);\r\n\r\n    const toggle = () => setOpen(!open);\r\n\r\n    const [name, setName] = useState('');\r\n    const [phone, setPhone] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [message, setMessage] = useState('');\r\n\r\n    const handleSubmit = (e) => {\r\n      e.preventDefault();\r\n      const templateParams = {message, name, email, phone}\r\n\r\n      console.log(process.env.REACT_APP_MY_EMAIL)\r\n\r\n      emailjs.send(process.env.REACT_APP_MY_EMAIL,'contact_form', templateParams, process.env.REACT_APP_EMAILJS_API)\r\n          .then(function(response) {\r\n             console.log('SUCCESS!', response.status, response.text);\r\n          }, function(err) {\r\n             console.log('FAILED...', err);\r\n          });\r\n      setOpen(!open)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Form inline>\r\n                <Button color=\"secondary\" onClick={toggle}>Contact</Button>\r\n            </Form>\r\n            <Modal returnFocusAfterClose={focusAfterClose} isOpen={open}>\r\n                <ModalBody>\r\n                  <Form onSubmit={handleSubmit}>\r\n                    <FormGroup>\r\n                      <Label for=\"email\">Email</Label>\r\n                      <Input\r\n                        type=\"email\"\r\n                        name=\"email\"\r\n                        id=\"email\"\r\n                        placeholder=\"Email\"\r\n                        value={email}\r\n                        onChange = {e => setEmail(e.target.value)}\r\n                      />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                      <Label for=\"name\">Name</Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        id=\"name\"\r\n                        placeholder=\"Name\"\r\n                        value={name}\r\n                        onChange ={e => setName(e.target.value)}\r\n                      />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                      <Label for=\"phone\">Phone Number</Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"phone\"\r\n                        id=\"phone\"\r\n                        placeholder=\"Phone Number\"\r\n                        value={phone}\r\n                        onChange ={e => setPhone(e.target.value)}\r\n                      />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                      <Label for='message'>Message</Label>\r\n                      <Input\r\n                        type=\"textarea\"\r\n                        name='message'\r\n                        id='message'\r\n                        value={message}\r\n                        onChange ={e => setMessage(e.target.value)}/>\r\n                    </FormGroup>\r\n                  </Form>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"secondary\" type='submit' value=\"Submit\" onClick={handleSubmit}>Submit</Button>\r\n                    <Button color=\"primary\" onClick={toggle}>Close</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact;\r\n","import React from 'react';\r\nimport Contact from './Contact';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className='sticky-top'>\r\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\r\n        </div>\r\n        <Contact />\r\n      </nav>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nconst Title = () => {\r\n  return (\r\n    <div>\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-sm\">\r\n          <h2> Call For Free Estimate </h2>\r\n        </div>\r\n        <div className=\"col-sm\">\r\n          <h2> 502-559-6605 </h2>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Title;\r\n","import React from 'react';\r\nimport wheel from '../images/grass.jpg';\r\n\r\nconst Jumbo = () => {\r\n  return (\r\n    <div className=\"card bg-dark text-white\">\r\n      <img className=\"card-img\" src={wheel} alt=\"\"/>\r\n      <div className=\"card-img-overlay d-flex\">\r\n        <div className=\"my-auto mx-auto text-center\">\r\n          <h1 className=\"card-title display-1 font-weight-bold\">Carly Scapes</h1>\r\n          <h1 className=\"card-text\">Never send a man to do a Woman's job!</h1>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Jumbo;\r\n","import React from 'react';\r\n\r\nconst Service = () => {\r\n  return (\r\n    <div className='my-4'>\r\n      <h2 className='mt-3'> Services </h2>\r\n      <hr/>\r\n      <div className=\"row\">\r\n        <div className=\"col-sm-6\">\r\n          <div className=\"card\">\r\n            <div className=\"card-body\">\r\n              <h5 className=\"card-title\">Turf Maintenance</h5>\r\n              <hr/>\r\n              <p>Lawn Mowing, Weed Eating, Edging, Dethatching, Aeration, Rolling, Sod </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-sm-6\">\r\n          <div className=\"card\">\r\n            <div className=\"card-body\">\r\n              <h5 className=\"card-title\">Landscaping</h5>\r\n              <hr/>\r\n              <p>Mulch or Decorative Stone installation, Tree & Srub trimming or removal, Tree, Srub, Flower and Planter installation, Retaining Walls </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row mt-3\">\r\n        <div className=\"col-sm-6\">\r\n          <div className=\"card\">\r\n            <div className=\"card-body\">\r\n              <h5 className=\"card-title\">Seasonal Maintenance</h5>\r\n              <hr/>\r\n              <p>Leaf Remocal, Landscape Bed Weeding, Holiday Decorations</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-sm-6\">\r\n          <div className=\"card\">\r\n            <div className=\"card-body\">\r\n              <h5 className=\"card-title\">Other Services</h5>\r\n              <hr/>\r\n              <p>Snow Removal, Pooper Scooper</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Service;\r\n","import React from 'react';\r\nimport carley from '../images/carley.jpg';\r\n\r\nconst About = () => {\r\n  return (\r\n    <div className=\"container mt-4\">\r\n      <div className=\"row\">\r\n        <div className=\"col-sm align-self-center\">\r\n          <h1 className='text-center display-3'>Carly Passmore</h1>\r\n          <h3 className='text-center'>Owner/Operator</h3>\r\n        </div>\r\n        <div className=\"col-sm\">\r\n          <img className=\"card-img\" src={carley} alt=\"\"/>\r\n        </div>\r\n        <div className=\"col-sm align-self-center\">\r\n          <p className='text-center lead'>Carly Scapes works hard to ensure every job is done\r\n          right the first time. We are dedicated to providing the best possible services to every costomer. </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default About;\r\n","import React from 'react';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div className='footer'>\r\n    <div className=\"container-fluid\">\r\n      <div className=\"row\">\r\n        <div className=\"col-sm align-self-center\">\r\n          <h2> Call For Free Estimate </h2>\r\n          <h2> 502-599-6605 </h2>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Footer;\r\n","import React from 'react';\nimport './App.css';\n\nimport Header from './components/layout/Header';\nimport Title from './components/layout/Title';\nimport Jumbo from './components/layout/Jumbotron';\nimport Service from './components/layout/Services';\nimport About from './components/layout/About';\nimport Footer from './components/layout/Footer';\n\n\nfunction App() {\n  return (\n      <div className=\"App\">\n        <Header />\n        <Title />\n        <Jumbo />\n        <About />\n        <Service />\n        <Footer />\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}